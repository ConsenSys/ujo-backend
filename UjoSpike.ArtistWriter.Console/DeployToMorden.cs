using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using System;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace UjoSpike.ArtistWriter.Console
{
    //Contract address 0x77caa46901bbad6e6f19615643093dff7bc19394
    //Tx hask = 0xc405aa841a6809258235ae3a7e3120cfcd459c6922cd061f5e9003061f28c7e1


    public class DeployToMorden
    {
        public async Task<string> ExecuteDeployment()
        {
            var contractByteCode =
               "0x60606040526106bc806100126000396000f360606040526000357c010000000000000000000000000000000000000000000000000000000090048063ae5074031461004f578063c6cefa2c14610109578063f93090a41461012c5761004d565b005b6100f36004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050909091908035906020019091908035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090909190505061026a565b6040518082815260200191505060405180910390f35b610116600480505061065c565b6040518082815260200191505060405180910390f35b6101426004808035906020019091905050610671565b6040518080602001848152602001806020018381038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101d55780601f106101aa576101008083540402835291602001916101d5565b820191906000526020600020905b8154815290600101906020018083116101b857829003601f168201915b50508381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156102585780601f1061022d57610100808354040283529160200191610258565b820191906000526020600020905b81548152906001019060200180831161023b57829003601f168201915b50509550505050505060405180910390f35b6000600060006000600050805480919060010190908154818355818115116103ab576003028160030283600052602060002091820191016103aa91906102ab565b808211156103a657600060008201600050805460018160011615610100020316600290046000825580601f106102e1575061031e565b601f01602090049060005260206000209081019061031d91906102ff565b8082111561031957600081815060009055506001016102ff565b5090565b5b506001820160006101000a81549060ff021916905560028201600050805460018160011615610100020316600290046000825580601f1061035f575061039c565b601f01602090049060005260206000209081019061039b919061037d565b80821115610397576000818150600090555060010161037d565b5090565b5b50506001016102ab565b5090565b5b5050509150600060005082815481101561000257906000526020600020906003020160005b50905085816000016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061042457805160ff1916838001178555610455565b82800160010185558215610455579182015b82811115610454578251826000505591602001919060010190610436565b5b5090506104809190610462565b8082111561047c5760008181506000905550600101610462565b5090565b5050848160010160006101000a81548160ff0219169083021790555083816002016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104ed57805160ff191683800117855561051e565b8280016001018555821561051e579182015b8281111561051d5782518260005055916020019190600101906104ff565b5b509050610549919061052b565b80821115610545576000818150600090555060010161052b565b5090565b50507f82ad7fe7fad03c4a99f948027d657e95fcf14112a11b36dab8dd76ce39ae5d92828787876040518085815260200180602001848152602001806020018381038352868181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156105e05780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156106395780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a160019250610653565b50509392505050565b6000600060005080549050905061066e565b90565b600060005081815481101561000257906000526020600020906003020160005b9150905080600001600050908060010160009054906101000a900460ff16908060020160005090508356";

            var addressFrom = "0x63c2ee74201b99de5e76198a7b2e6540bca83347";
            var pass = "password";

            var web3 = new Web3();

            var result = await web3.Personal.UnlockAccount.SendRequestAsync(addressFrom, pass, new HexBigInteger(600));
           


            //deploy the contract, no need to use the abi as we don't have a constructor
            var transactionHash = await web3.Eth.DeployContract.SendRequestAsync(contractByteCode, addressFrom, new HexBigInteger(1000000));
          
            result = await web3.Personal.LockAccount.SendRequestAsync(addressFrom);
           
            TransactionReceipt receipt = null;

            //wait for the contract to be mined to the address
            while (receipt == null)
            {
                Thread.Sleep(1000);
                receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            }

            return receipt.ContractAddress;
        }
    }
}
